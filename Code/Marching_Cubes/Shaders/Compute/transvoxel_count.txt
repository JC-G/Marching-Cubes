//Transvoxel stage 2 - Calculate number of "marchable" cells, cell classes

#extension GL_ARB_shader_atomic_counter_ops : enable

layout(binding = 1) buffer Grid {
    float densityValues[];
};

//number of cells to polygonize
layout(binding = 2) uniform atomic_uint marchableCount;

//number of points in the resulting mesh
layout(binding = 3) uniform atomic_uint pointCount;

layout(std430,binding = 4) buffer Marchables {
    uvec4 marchableList[]; //x,y,z, cell class - cell class is the lowest 2 nibbles, cell type (transition or regular) is the rest
    //TODO - how are we dealing with orientation of transition cells
};

layout(local_size_x=8,local_size_y=8,local_size_z=8) in;

void main () {
    uvec3 gid = gl_GlobalInvocationID;
    if (gid.x >= chunkSize.x || gid.y >= chunkSize.y || gid.z >= chunkSize.z)
	{
		return;
	}

	//TODO - detect transition cells here

	float gridCells[8];
	uvec3 gridPos[8];

	//assigned as per Figure 3.7 in transvoxel paper - note this is DIFFERENT to the previous marching cubes algorithm
    gridPos[0] = gid;
	gridPos[1] = gid+uvec3(1,0,0);
	gridPos[2] = gid+uvec3(0,1,0);
	gridPos[3] = gid+uvec3(1,1,0);
	gridPos[4] = gid+uvec3(0,0,1);
	gridPos[5] = gid+uvec3(1,0,1);
	gridPos[6] = gid+uvec3(0,1,1);
	gridPos[7] = gid+uvec3(1,1,1);

    for (int i = 0; i < 8; i++)
	{
		gridCells[i] = densityValues[getArrID(gridPos[i],uvec3(0))];
	}

	int cellIndex = 0;

    if (gridCells[0] < 0) cellIndex |= 1;
	if (gridCells[1] < 0) cellIndex |= 2;
	if (gridCells[2] < 0) cellIndex |= 4;
	if (gridCells[3] < 0) cellIndex |= 8;
	if (gridCells[4] < 0) cellIndex |= 16;
	if (gridCells[5] < 0) cellIndex |= 32;
	if (gridCells[6] < 0) cellIndex |= 64;
	if (gridCells[7] < 0) cellIndex |= 128;

	if (cellIndex != 0 && cellIndex != 255)
	{
		atomicCounterAddARB(pointCount,regularTotalTable[regularCellClass[cellIndex]]);
		uint bufferIndex = atomicCounterIncrement(marchableCount);
		uvec4 mc = uvec4(gid.x,gid.y,gid.z,cellIndex);
		marchableList[bufferIndex] = mc;
	}

}
